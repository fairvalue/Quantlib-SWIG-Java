/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.github.vonrosen.quantlib;

public class _IsdaCdsEngine {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected _IsdaCdsEngine(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(_IsdaCdsEngine obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        QuantLibJNI.delete__IsdaCdsEngine(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public final static class NumericalFix {
    public final static _IsdaCdsEngine.NumericalFix None = new _IsdaCdsEngine.NumericalFix("None");
    public final static _IsdaCdsEngine.NumericalFix Taylor = new _IsdaCdsEngine.NumericalFix("Taylor");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static NumericalFix swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + NumericalFix.class + " with value " + swigValue);
    }

    private NumericalFix(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private NumericalFix(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private NumericalFix(String swigName, NumericalFix swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static NumericalFix[] swigValues = { None, Taylor };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class AccrualBias {
    public final static _IsdaCdsEngine.AccrualBias HalfDayBias = new _IsdaCdsEngine.AccrualBias("HalfDayBias");
    public final static _IsdaCdsEngine.AccrualBias NoBias = new _IsdaCdsEngine.AccrualBias("NoBias");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AccrualBias swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AccrualBias.class + " with value " + swigValue);
    }

    private AccrualBias(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AccrualBias(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AccrualBias(String swigName, AccrualBias swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AccrualBias[] swigValues = { HalfDayBias, NoBias };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class ForwardsInCouponPeriod {
    public final static _IsdaCdsEngine.ForwardsInCouponPeriod Flat = new _IsdaCdsEngine.ForwardsInCouponPeriod("Flat");
    public final static _IsdaCdsEngine.ForwardsInCouponPeriod Piecewise = new _IsdaCdsEngine.ForwardsInCouponPeriod("Piecewise");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ForwardsInCouponPeriod swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ForwardsInCouponPeriod.class + " with value " + swigValue);
    }

    private ForwardsInCouponPeriod(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ForwardsInCouponPeriod(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ForwardsInCouponPeriod(String swigName, ForwardsInCouponPeriod swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ForwardsInCouponPeriod[] swigValues = { Flat, Piecewise };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
